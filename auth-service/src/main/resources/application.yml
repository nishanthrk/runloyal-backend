spring:
  application:
    name: auth-service
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/authdb}
    username: ${DATABASE_USERNAME:nishanth}
    password: ${DATABASE_PASSWORD:}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    validate-on-migrate: false
  
  redis:
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:password}
    timeout: ${REDIS_TIMEOUT:2000ms}
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
    database: 0
  
  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
      cache-null-values: false
  
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope:
              - openid
              - profile
              - email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: Google
          github:
            client-id: ${GITHUB_CLIENT_ID:your-github-client-id}
            client-secret: ${GITHUB_CLIENT_SECRET:your-github-client-secret}
            scope:
              - user:email
              - read:user
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: GitHub
          facebook:
            client-id: ${FACEBOOK_CLIENT_ID:your-facebook-client-id}
            client-secret: ${FACEBOOK_CLIENT_SECRET:your-facebook-client-secret}
            scope:
              - email
              - public_profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: Facebook
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo
            user-name-attribute: sub
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: id

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: auth-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false

server:
  port: 8081

# Custom health endpoint is used instead of actuator

# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET:mySecretKey123456789012345678901234567890}
    access-token-expiration: ${JWT_ACCESS_EXPIRATION:900000} # 15 minutes
    refresh-token-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days
    issuer: ${JWT_ISSUER:auth-service}
  
  refresh-token:
    max-per-user: ${REFRESH_TOKEN_MAX_PER_USER:5}
    cleanup-interval: ${REFRESH_TOKEN_CLEANUP_INTERVAL:3600000} # 1 hour
  
  redis:
    tokenBlacklist:
      keyPrefix: "auth:blacklist:"
      defaultTtl: ${JWT_ACCESS_EXPIRATION:900000} # Same as access token expiration
    userCache:
      keyPrefix: "auth:user:"
      ttl: 300000 # 5 minutes
  
  user-service:
    base-url: ${USER_SERVICE_URL:http://localhost:8082}
    internal-api-key: ${USER_SERVICE_API_KEY:internal-secret-key}
  
  oauth2:
    authorizedRedirectUris: ${OAUTH2_REDIRECT_URI:http://localhost:8081/api/auth/oauth2/callback}
  
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method

logging:
  level:
    com.example.authservice: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/auth-service.log

---
# Docker profile
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://host.docker.internal:5432/authdb}
    username: ${DATABASE_USERNAME:nishanth}
    password: ${DATABASE_PASSWORD:}
  
  redis:
    host: ${REDIS_HOST:host.docker.internal}
    password: ${REDIS_PASSWORD:password}

# Service URLs for Docker
app:
  user-service:
    base-url: ${USER_SERVICE_URL:http://localhost:8082}